q2
package cg;
import java.util.HashSet;
import java.util.Set;

public class collection2 {

	public static void main(String[] args) {
		Set<Object> p=new HashSet<>();
		p.add(-7);
		p.add(700);
		p.add(0);
		p.add("Hello");
		p.add(null);
		p.add(24);
		p.add(-400);
		p.add(-7); // duplicate hence it will not show
		p.add("Bye");
		p.add("3.14");
		
		System.out.println(p);
	}
}
======================================================================
q4
package cg;
import java.time.LocalDate;
import java.time.Month;
import java.util.LinkedList;
import java.util.List;

public class collection4 {

	public static void main(String[] args) {
		List<LocalDate> l=new LinkedList<>();
		l.add(LocalDate.of(2000,Month.APRIL,23));
		l.add(LocalDate.of(2004,Month.FEBRUARY,27));
		l.add(LocalDate.of(2002,Month.JANUARY,18));
		l.add(LocalDate.of(2000,Month.JULY,8));
		l.add(LocalDate.of(2001,Month.JUNE,22));
		l.add(LocalDate.of(2009,Month.DECEMBER,21));
		l.add(LocalDate.of(2002,Month.OCTOBER,12));
		l.add(LocalDate.of(2008,Month.MARCH,7));
		l.add(LocalDate.of(2004,Month.SEPTEMBER,4));
		l.add(LocalDate.of(2005,Month.FEBRUARY,7));
		
		for(LocalDate ld: l)
		{
			if(ld.isLeapYear())
			{
				System.out.println(" date of birth is "+ld+" and it was leap year");
			}
			else
			{
				System.out.println(" date of birth is "+ld+" and it was not leap year");
			}
		}
	}

}
===========================================================================
q3
package cg;
import java.util.Comparator;
import java.util.Scanner;
import java.util.TreeSet;

public class collection3 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Choose between following options:");
		System.out.println("1.ID|2.Name|3.Department|4.Salary");
		int choose=sc.nextInt();
		TreeSet<Employee> emp=null;
		switch(choose)
		{
			case 1: emp=new TreeSet<>(new IdComp());
					break;
			case 2: emp=new TreeSet<>(new NameComp());
					break;
			case 3:	emp=new TreeSet<>(new DeptComp());
					break;
			case 4: emp=new TreeSet<>(new SalComp());
					break;
			default:System.out.println("Invalid Option");
		}
		emp.add(new Employee(1,"pratik","IT",2000));
		emp.add(new Employee(2,"pramod","HR",1800));
		emp.add(new Employee(3,"rahul","Management",1900));
		emp.add(new Employee(4,"akash","HR",2100));
		emp.add(new Employee(5,"latish","Training",2400));
		emp.add(new Employee(6,"hitesh","IT",2000));
		emp.add(new Employee(9,"omkar","IT",2300));
		emp.add(new Employee(7,"sagar","HR",1900));
		emp.add(new Employee(8,"rohan","Management",1700));
		
		for(Employee e:emp)
		{
			System.out.println(e);
		}
	}

}

class IdComp implements Comparator<Employee> {
	@Override
	public int compare(Employee o1, Employee o2) {
		if(o1.getId()>o2.getId())
		{
			return 1;
		}
		else
		{
			return -1;
		}
	}
}
class NameComp implements Comparator<Employee>{
	@Override
	public int compare(Employee o1, Employee o2) {
		
		return o1.getName().compareTo(o2.getName());
	}
}
class DeptComp implements Comparator<Employee>{
	@Override
	public int compare(Employee o1, Employee o2) {
		return o1.getDepartment().compareTo(o2.getDepartment());
	}
}
class SalComp implements Comparator<Employee>{
	@Override
	public int compare(Employee o1, Employee o2) {
		if(o1.getSalary()>o2.getSalary())
		{
			return 1;
		}
		else
		{
			return -1;
		}
	}
}
class Employee{
	
	int id;
	String name;
	String department;
	int salary;
	
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getDepartment() {
		return department;
	}
	public void setDepartment(String department) {
		this.department = department;
	}
	public int getSalary() {
		return salary;
	}
	public void setSalary(int salary) {
		this.salary = salary;
	}
	
	public Employee(int id, String name, String department, int salary) {
		super();
		this.id = id;
		this.name = name;
		this.department = department;
		this.salary = salary;
	}
	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + ", department=" + department + ", salary=" + salary + "]";
	}
	
}


===================================================================
q1
package cg;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class collection1 {

	public static void main(String[] args) {
		Map<Long,Contact> m=new HashMap<>();
		m.put(101l,new Contact(99567856,"pari","pari@abc.com",Contact.Gender.Female));
		
		Set<Long> keys=m.keySet();
		System.out.println("Keys:-");
		for(long i:keys)
		{
			System.out.println(i);
		}
		System.out.println("----------------------------------------------------------------------------");
		System.out.println("Values:-");
		for(long i:keys)
		{
			System.out.println(m.get(i));
		}
		System.out.println("----------------------------------------------------------------------------");
		System.out.println("Key and Value-");
		System.out.println(m);
	}

}

class Contact{
	
	long phoneNo;
	String name;
	String email;
	private Contact.Gender gen;
	enum Gender{
		Male,Female,Others
	}
	public Contact(long phoneNo, String name, String email ,Gender gen) {
		super();
		this.phoneNo = phoneNo;
		this.name = name;
		this.email = email;
		this.gen=gen;
	}
	@Override
	public String toString() {
		return "Contact [phoneNo=" + phoneNo + ", name=" + name + ", email=" + email + ", gen=" + gen + "]";
	}
	
}
==========================================================================
